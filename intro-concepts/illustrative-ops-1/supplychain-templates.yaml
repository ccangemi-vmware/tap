# This configuration uses Cartographer APIs to wrap templated resources.
# Three Cartographer resources are used in this example:
#   - ClusterSourceTemplate, ClusterImageTemplate, and ClusterTemplate
# Each template spec defines specific output fields. Hence, the choice of
# template depends on the type of output expected from the embedded resource.
# See the comments below for details.
# Note: ClusterTemplate does not have output fields.

---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: workload-git-repository
spec:
  # The ClusterSourceTemplate `url` and `revision` output fileds will be
  # dynamically populated from the status of the embedded GitRepository resource
  urlPath: .status.artifact.revision
  revisionPath: .status.artifact.revision
  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$
      labels:
        app.kubernetes.io/part-of: $(workload.metadata.name)$
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: workload-kpack-image
spec:
  # The ClusterImageTemplate `image` output field will be dynamically
  # populated from the status of the embedded Image resource
  imagePath: .status.latestImage
  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: $(workload.metadata.name)$
      lables:
        app.kubernetes.io/part-of: $(workload.metadata.name)$
    spec:
      tag: us-east4-docker.okg.dev/fe-ciberkleid/cartographer-demo/$(workload.metadata.name)$
      serviceAccount: service-account
      builder:
        kind: ClusterBuilder
        name: builder
      source:
        blob:
          # Placeholder for Cartographer to populate using ClusterSourceTemplate output
          url: $(source.url)$
      build: # Optional
        env:
          - name: BP_OCI_SOURCE
            value: $(workload.spec.source.git.url)$
          - name: BP_OCI_REVISION
            value: $(source.revision)$
---
apiVersion: carto.run.v1alpha1
kind: ClusterTemplate
metadata:
  name: workload-k8s-deployment
spec:
  # ClusterTemplate does not have any output fiedls
  template:
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: $(workload.metadata.name)$
      labels:
        app.kubernetes.io/part-of: $(workload.metadata.name)$
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/part-of: $(workload.metadata.name)$
        spec:
          serviceAccountName: $(workload.spec.serviceAccountName)$
          containers:
            - name: workload
            # Inject value of image.status.latestImage from image/hello-world
            image: $(image)$
            env: {}
            ports:
              - name: http-port
                containerPort: $(params.containerPort)$
      selector:
        matchLabels:
          app.kubernetes.io/part-of: $(workload.metadata.name)$
---
apiVersion: carto.run.v1alpha1
kind: ClusterTemplate
metadata:
  name: workload-k8s-service
spec:
  template:
    apiVersion: carto.run.v1alpha1
    kind: ClusterTemplate
    metadata:
      name: workload-k8s-service
    spec:
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: $(workload.metadata.name)$
          labels:
            app.kubernetes.io/part-of: $(workload.metadata.name)$
        spec:
          ports:
            - name: http
              port: 80
              protocol: TCP
              targetPort: $(params.containerPort)$
          selector:
            app.kubernetes.io/part-of: $(workload.metadata.name)$
          type: ClusterIP